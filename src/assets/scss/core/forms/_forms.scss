.form-control-label, .form-check-label {
  color: color(text, base);
  font-size: .75rem;
  font-weight: 600;
}

.form-control-label--required {
  color: color(status, expired-text);
}

.form-check-input {
  margin: 0 8px 0 0;
  position: relative;
}

.form-control {
  font-size: .75rem;
  filter: none;
  height: auto;

  //height: calc(
  //  #{1.5 * 1em} + #{.375rem * 2} + #{2em * 2.5}
  //);

  &:focus {
    &::placeholder {
      color: color(text, muted);
    }
  }
}

.form-control-lg {
  height: calc(
    #{1.5 * 1.5em} + #{.375rem * 2} + #{2 * 2.5}
  );
}

.form-control-sm {
  height: calc(
    #{1.5 * 0.3em} + #{.375rem * 2} + #{2 * 2.5}
  );
}

.form-control-flush {
  background-color: transparent;
  border-width: 0;
  box-shadow: none;
  padding: 0;

  &:focus {
    background-color: transparent;
    border-width: 0;
    box-shadow: none;
  }
}

textarea[resize="none"] {
  resize: none !important;
}

textarea[resize="both"] {
  resize: both !important;
}

textarea[resize="vertical"] {
  resize: vertical !important;
}

textarea[resize="horizontal"] {
  resize: horizontal !important;
}

.form-control-muted {
  background-color: color(theme, secondary);
  border-color: color(theme, secondary);
  box-shadow: none;

  &:focus {
    background-color: color(theme, secondary);
  }
}

.form-control-alternative {
  box-shadow: 0 1px 3px rgba(50, 50, 93, 0.15), 0 1px 0 rgba(0, 0, 0, 0.02);
  border: 0;
  transition: box-shadow 0.15s ease;

  &:focus {
    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08);
  }
}

.form-control-lg,
.input-group-lg .form-control,
.input-group-text {
  font-size: 1rem !important;
}

//
// Input group
//

.custom-control {
  padding-left: .5rem + 1rem - 1rem;
}

.input-group {
  box-shadow: inset 0 1px 1px rgba(color(monochrome, black), .075);
  border-radius: .25rem;

  .form-control {
    box-shadow: none;

    &:focus {
      box-shadow: none;
    }
  }
}

.input-group-text {
  background-color: color(monochrome, white);

  i {
    font-size: .875rem;

    --ggs: .8;
  }

  .custom-control {
    line-height: 1;
  }
}

.input-group-prepend {
  // Should add the value of border right in variables.scss
  .input-group-text {
    border-right: 0;
  }
}

.input-group-append {
  // Should add the value of border right in variables.scss
  .input-group-text {
    border-left: 0;
  }
}

// Merged input group

.input-group-merge {
  .form-control {
    &:not(:first-child) {
      border-left: 0;
      padding-left: 0;
    }

    &:not(:last-child) {
      border-right: 0;
      padding-right: 0;
    }
  }
}

// Alternative input groups related to .form-control-alternative

.input-group-alternative {
  box-shadow: 0 1px 3px rgba(50, 50, 93, 0.15), 0 1px 0 rgba(0, 0, 0, 0.02);
  border: 0;
  transition: box-shadow 0.15s ease;

  .form-control,
  .input-group-text {
    border: 0;
    box-shadow: none;
  }
}

.focused {
  .input-group-alternative {
    box-shadow: 0 4px 6px rgba(50, 50, 93, 0.11), 0 1px 3px rgba(0, 0, 0, 0.08) !important;
  }
}

// Remove borders and paddings

.input-group-flush {
  box-shadow: none;

  > .form-control {
    padding: 0;
    border-width: 0;
    background-color: transparent;
  }

  > .input-group-prepend,
  > .input-group-append {
    > .input-group-text {
      padding: 0 1rem 0 0;
      border-width: 0;
      background-color: transparent;
    }
  }
}

// .focus class is applied dynamically from theme.js

.focused {
  .input-group {
    box-shadow: 0 0 0 .2rem rgba(#007bff, .25);
  }

  .input-group-text {
    color: color(theme, base);
    background-color: color(monochrome, white);
    border-color: color(theme, base);
  }

  .form-control {
    border-color: color(theme, base);
  }

  .input-group-flush {
    box-shadow: none;
  }
}

.form-group {
  width: 100%;
}
